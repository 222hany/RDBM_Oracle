VARCHAR VS VARCHAR2

VARCHAR : Oracle 9i 이전 버전 사용
          저장되는 문자열의 실제 길이에 따라 크기가 결정. 문자열 길이에 상한 제한 없음. 저장공간을 효율적으로 사용하지 못할 수 있음.
          예를 들어 데이터 길이가 10자인 VARCHAR열에 "Hello"를 저장하면 "Hello"가 저장되고 나머지 공간은 비어있음.

VARCHAR2 : Oracle 9i 이후 버전부터 사용되는 문자열 데이터유형
           실제 데이터 길이와 관계없이 미리 정의 된 최대 크기로 저장 공간을 사용. 문자열 길이에 제한을 두어 저장공간을 효율적으로 사용할 수 있음.
           예를 들어 데이터 길이가 10자인 VARCHAR2열에 "Hello"를 저장하면 "Hello"가 저장.


INT VS NUMBER

INT : 정수 유형 데이터. 소수점 이하 값을 저장할 수 없으며, 정수 값만 저장할 수 있음.
      예를 들어 1,2,-3과 같은 정수 값을 저장할 때 사용.

NUMBER : 소수점 이하 값을 저장할 수 있는 숫자 데이터 유형. 정수와 소수를 모두 저장할 수 있음.
         예를 들어 NUMBER(20,2)는 총 10자리 숫자를 표현하고 소수점 이하 2자리까지 값을 저장할 수 있음.

WINDOW : SQL에서 사용되는 분석 함수. 결과 집합 내에서 행의 순서와 관련된 계산을 수행할 수 있음. 집계, 순위, 평균, 합계 등을 계산할 때 유용.
         데이터를 파티션 별로 분할하고 순서를 정의한 다음 각 파티션 내에 계산을 수행.
         *
         <윈도우함수>(<표현식>)OVER(                    -- 사용할 윈도우 함수 작성.(EX.SUM,AV,RANK 등) 계산을 수행 할 열 또는 식.
                    PARTITION BY <파티션 열>           -- 데이터를 파티션으로 나누는데 사용할 열을 지정.
                    ORDER BY <정렬 열>                 -- 각 파티션 내에서 행 순서를 정의하는데 사용할 열을 지정.
                    ROWS BETWEEN <시작 행> AND <끝 행> -- 계산을 수행할 행의 범위를 정의하는데 사용.
         )
         *
         SELECT ORDER_ID, ORDER_DATE, TOTAL_PRICE,
         SUM(TOTAL_PRICE) OVER (ORDER BY ORDER_DATE) AS OD -- 이 부분이 윈도우 함수. 이 함수는 ORDER_DATE를 기준으로 각 주문의 총 가격을 누적한 값을 반환.
         FROM ORDERS;
         *RANK() ROW_NUMBER() : 결과 집합의 행에 순위를 할당하는데 사용.
          RANK() : 동일한 값이 있는 경우 동일한 순위 부여. 동일한 값이 여러 번 나타나면 동일한 순위가 여러 번 반복.
                   예를 들어 동일한 값을 가진 두 번째와 세 번째 행에 둘 다 2위 할당. 결과 집합에서 중간에 순위를 건너뛸 수 있음.
          ROW_NUMBER() : 동일한 값이 있더라도 각 행에 고유한 순위를 부여. 동일한 값이 있는 경우에도 각 행에 대해 중복되지 않는 순위를 할당
                         예를 들어 동일한 값을 가진 두 번째와 세 번째 행에 대해 각각 2위와 3위 할당.
          ROWNUM : 데이터베이스에서 사용할 수 있는 가상 열 중 하나. 검색 결과 집합의 각 행에 할당된 고유 번호를 나타냄. 결과 집합의 특정 행을 선택하거나 행에 번호를 할당하는데 사용.
                   검색 결과 집합을 처리하는 동안 생성됨. 결과 집합에 대한 각 행에 할당. 1부터 시작하여 각 행에 연속된 정수 값을 부여.
                   원하는 행을 선택하거나 행에 일련번호를 할당할 수 있지만 결과를 정렬하거나 분할하는 작업에 영향을 주진 않음.
