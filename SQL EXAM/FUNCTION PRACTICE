//NVL (NULL VALUE) : NULL값을 다른 값으로 대체할 때 사용
SELECT ENAME, NVL(COMMISSION, 0) AS COMMISSION FROM EMPLOYEE;

//NEXT DAY : 다음 주어진 요일 날짜 찾기
SELECT ENAME, NEXT_DAY(SYSDATE, 'FRIDAY')AS NEXT_DAY FROM DUAL;

//TRUNC : 날짜 또는 숫자의 소수부 제거
SELECT ENAME, TRUNC(SALARY) AS TRUNC_SALARY FROM EMPLOYEE;

//FLOOR(버림), CEIL(올림), ROUND(소수점 뒷자리 지정) : 숫자 반올림 및 내림
SELECT ENAME, FLOOR(SALARY) AS FLOOR_SAL FROM EMPLOYEE;
SELECT ENAME, CEIL(SALARY) AS CEIL_SAL FROM EMPLOYEE;
SELECT ENAME, ROUND(SALARY, 2) AS ROUND_SAL FROM EMPLOYEE;
*
//ID가 1인 직원의 급여를 FLOOR 함수 사용하여 내림
SELECT EMPLOYEE_ID, EMPLOYEE_NAME, FLOOR(SALARY) AS F_SAL FROM SALARY_INFO WHERE EMPLOYEE_ID = 1;
//ID가 2인 직원의 급여를 CEIL 함수 사용하여 올림
SELECT EMPLOYEE_ID, EMPLOYEE_NAME, CEIL(SALARY) AS C_SAL FROM SALARY_INFO WHERE EMPLOYEE_ID = 2;
//ID가 3인 직원의 급여를 ROUND 함수 사용하여 반올림
SELECT EMPLOYEE_ID, EMPLOYEE_NAME, ROUND(SALARY,2) AS R_SAL FROM SALARY_INFO WHERE EMPLOYEE_ID = 3;
//ID가 4인 직원의 급여를 FLOOR 함수 사용하여 내림
SELECT EMPLOYEE_ID, EMPLOYEE_NAME, FLOOR(SALARY) AS F_SAL FROM SALARY_INFO WHERE EMPLOYEE_ID = 4;

//ABS(Absolute) : 절대값 계산 -를 없앰
SELECT ENAME, ABS(COMMISSION) AS ABS_COMMISSION FROM EMPLOYEE;

//문자열에서 특정 문자 또는 문자열을 다른 문자열로 대체
SELECT REPLACE(DESCRIPTION, '풍미', '맛') FROM MENU;
SELECT PRODUCT_NAME, REPLACE(PRODUCT_NAME, '스마트', '똑똑한') FROM PRODUCTS;

//SUBSTR : 문자열을 일부 추출
SELECT PRODUCT_NAME, SUBSTR(PRODUCT_NAME, 1, 3) FROM PRODUCTS;

//CONCAT : 두 문자열을 결합
SELECT PRODUCT_NAME || '가격 : $' || TO_CHAR(PRICE, '999.99') FROM PRODUCTS;

//TRIM : 문자열 양쪽 끝에서 제거 LTRIM : 문자열 왼쪽에서 제거 RTRIM : 문자열 오른쪽에서 제거
SELECT PRODUCT_NAME, TRIM(' '), LTRIM(PRODUCT_NAME, '노트'), RTRIM(PRODUCT_NAME, '폰') FROM PRODUCTS;
//전자제품 카테고리에서 제품을 빼고 출력
SELECT RTRIM(CATEGORY, '제품') FROM PRODUCTS;

//INSTR : 문자열에서 특정 문자 위치 출력
SELECT CATEGORY, INSTR(CATEGORY, '품') FROM PRODUCTS;

//LENGTH : 문자 단위의 문자열 길이 LENGTHB : 바이트 문자열 길이
SELECT PRODUCT_NAME, LENGTHB(PRODUCT_NAME), LENGTH(PRODUCT_NAME) FROM PRODUCTS;

//가장 긴 제품이름 찾기(그룹함수는 이중셀렉문 사용)
SELECT PRODUCT_NAME FROM PRODUCTS WHERE LENGTH(PRODUCT_NAME) = (SELECT MAX(LENGTH(PRODUCT_NAME)) FROM PRODUCTS);

//제품 가격 반올림
SELECT PRODUCT_NAME, ROUND(PRICE) FROM PRODUCTS;

//제품 이름에 폰이 들어가는 제품 찾기 INSTR
SELECT PRODUCT_NAME FROM PRODUCTS WHERE INSTR(PRODUCT_NAME, '폰') >0;

UPDATE BOOK SET TITLE = '태백싼맥' WHERE TITLE = '태백산맥';
UPDATE BOOK SET TITLE = '땅' WHERE TITLE = '토지';
UPDATE BOOK SET TITLE = '또 다른 쉼터' WHERE BOOK_ID = 6;

//책이름을 7~10까지 변경. '나니아 연대기' BETWEEN
UPDATE BOOK SET TITLE = '나니아 연대기' WHERE BOOK_ID BETWEEN 7 AND 10;

//CASE문을 사용해 한꺼번에 변경
UPDATE BOOK SET TITLE =
    CASE
        WHEN TITLE = '얼음과 불의 노래' THEN '얼음과 바다의 노래'
        WHEN TITLE = '해를 품은 달' THEN '달을 품은 달'
        WHEN TITLE = '빛의 눈동자' THEN '햇빛의 눈동자'
        ELSE TITLE
    END;
    
//14~20까지 제목 변경
UPDATE BOOK SET TITLE =
    CASE
        WHEN TITLE = '바람의 나라' THEN '바람의 노래'
        WHEN TITLE = '미래의 선택' THEN '과거의 선택'
        WHEN TITLE = '꽃을 보듯 너를 본다' THEN '너를 보듯 꽃을 본다'
        WHEN TITLE = '아프니까 청춘이다' THEN '아프리카 청춘이다'
        WHEN TITLE = '소나기' THEN '소나개'
        WHEN TITLE = '우리들의 행복한 시간' THEN '우리들의 행복한 시급'
        WHEN TITLE = '몽실언니' THEN '묭실언니'
        ELSE TITLE
    END;

//DUAL 사용하여 테이블 없이 함수 보기
SELECT REPLACE ('HELLO, WORLD!', 'HELLO', 'HI') FROM DUAL;
SELECT 'HELLO!' || 'WORLD!' AS TEXT FROM DUAL;

//LOWER 문자열을 소문자로 변환
SELECT LOWER('Hello, World') FROM DUAL;

//UPPER 문자열을 대문자로 변환
SELECT UPPER('Hello, World') FROM DUAL;

//INITCAP 각단어의 첫 글자를 대문자로 변환
SELECT INITCAP('hello, world') FROM DUAL;

//SUBSTR 문자열 1~5 추출
SELECT SUBSTR('Hello, World', 1, 5) FROM DUAL;

//TRIM '     Hello, World     ' 양쪽, 왼쪽, 오른쪽 공백제거
SELECT TRIM('     Hello, World     ')FROM DUAL;
SELECT LTRIM('     Hello, World     ')FROM DUAL;
SELECT RTRIM('     Hello, World     ')FROM DUAL;

//INSTR WORLD의 문자열 찾기
SELECT INSTR('Hello, World', 'World') FROM DUAL;

//LENGTHB, LENGTH
SELECT LENGTHB('Hello, World') FROM DUAL;
SELECT LENGTH('Hello, World') FROM DUAL;

//PAD : 문자열 채우기
SELECT LPAD('5', '4', '0') FROM DUAL;

//서브쿼리활용(이중셀렉문) 가장 비싼 책의 정보 출력
SELECT * FROM BOOK WHERE PRICE = (SELECT MAX(PRICE)FROM BOOK);

//윈도우함수 RANK 활용 장르별 두번째로 비싼 책 출력
SELECT * FROM (SELECT B.*, RANK() OVER(PARTITION BY GENRE ORDER BY PRICE) RNK FROM BOOK B) WHERE RNK = 2;

//윈도우함수 ROW_NUMBER 활용 장르별 가장 비싼책 가져오기 
SELECT * FROM (SELECT B.*, ROW_NUMBER() OVER(PARTITION BY GENRE ORDER BY PRICE DESC) RN FROM BOOK B) WHERE RN = 1;

//각 저자가 쓴 책 수가 2권 이상인 저자 찾기
SELECT AUTHOR, COUNT(*) FROM BOOK GROUP BY AUTHOR HAVING COUNT(*) >= 2;

//상위 5권의 책 가져오기
SELECT * FROM (SELECT ROWNUM AS RN, B.* FROM BOOK B) WHERE RN <= 5;

//'Romance' 장르의 책 중에서 제일 비싼 책 찾기
SELECT * FROM (SELECT B.*, RANK() OVER(PARTITION BY GENRE ORDER BY PRICE) RNK FROM BOOK B) WHERE RNK = 1 AND GENRE = 'Romance';

//책의 출판 년도와 그 해에 출판된 책 수
SELECT PUBLICATION_YEAR AS 출판년도, COUNT(*) AS 출판부수 FROM BOOK B GROUP BY PUBLICATION_YEAR;
