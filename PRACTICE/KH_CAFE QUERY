//서울에 위치한 모든 카페 조회
SELECT * FROM CAFES WHERE ADDRESS LIKE '%서울%';

//메뉴가 아메리카노가 있는 카페 찾기
SELECT C.C_NAME, M.MENU_NAME
FROM CAFES C
JOIN MENU M ON C.C_ID = M.C_ID
WHERE M.MENU_NAME = '아메리카노';

//주말에 운영되는 카페 목록
SELECT * FROM CAFES WHERE OPERATING_HOURS LIKE '%주말%';

//02를 포함하는 전화번호를 가지는 카페 찾기
SELECT * FROM CAFES WHERE PHONE_NUMBER LIKE '%02%';

//이름에 라떼가 포함된 카페 찾기
SELECT * FROM CAFES WHERE C_NAME LIKE '%라떼%';

//4.00 미만의 가격을 가진 메뉴 항목 찾기
SELECT * FROM MENU WHERE PRICE < 4.00;

//매일 운영되는 카페 찾기
SELECT * FROM CAFES WHERE OPERATING_HOURS LIKE '%매일%';

//매일 운영되고 가격 4.00 미만의 가격을 가진 카페 찾기
SELECT C.C_NAME, C.OPERATING_HOURS, M.MENU_NAME, M.PRICE
FROM CAFES C
JOIN MENU M ON C.C_ID = M.C_ID
WHERE OPERATING_HOURS LIKE '%매일%' AND PRICE < 4.00;

//대 라는 이름을 가진 카페 찾기
SELECT * FROM CAFES WHERE C_NAME LIKE '%대%';

//모든 카페의 메뉴 항목 수 계산
SELECT COUNT(*) AS NUM_OF_MENU_ITEM FROM MENU;

//메뉴 설명에 '아이스'가 포함된 카페 찾기
SELECT * FROM MENU WHERE DESCRIPTION LIKE '%아이스%';

//각 카페별 모든 메뉴 항목의 총 가격 계산
SELECT C_ID, SUM(PRICE) FROM MENU GROUP BY C_ID;

//'초콜릿'이 설명에 포함된 메뉴 항목이 있는 카페 선택
SELECT C.C_NAME, M.MENU_NAME, M.DESCRIPTION
FROM CAFES C
JOIN MENU M ON C.C_ID = M.C_ID
WHERE DESCRIPTION LIKE '%초콜릿%';

//JOIN 사용하여 총 주문 내역 조회
SELECT O.ORDER_ID, C.C_NAME, M.MENU_NAME, M.PRICE, O.QUANTITY, O.TOTAL_PRICE
FROM ORDERS O
JOIN CAFES C ON O.C_ID = C.C_ID
JOIN MENU M ON O.MENU_ID = M.MENU_ID
WHERE O.ORDER_ID = 6;

//특정 카페에서 주문 조회(IN 바다 카페 주문 조회)
SELECT O.ORDER_ID, C.C_ID, C.C_NAME AS ORDER_IN바다, M.MENU_NAME
FROM ORDERS O
JOIN CAFES C ON O.C_ID = C.C_ID
JOIN MENU M ON O.MENU_ID = M.MENU_ID
WHERE C.C_ID = 3;

//특정 주문 날짜 범위 내 주문 조회(13시 이후의 주문건만 조회)
SELECT * FROM ORDERS WHERE EXTRACT(HOUR FROM ORDER_DATE) >= 13;
SELECT * FROM ORDERS WHERE ORDER_DATE BETWEEN TO_DATE('2023-10-10','YYYY-MM-DD') AND TO_DATE('2023-10-12','YYYY-MM-DD');

//각 카페별 주문 총액 조회
SELECT C_ID, SUM(TOTAL_PRICE) FROM ORDERS GROUP BY C_ID;

//주문 수량이 3개 이상인 주문 조회
SELECT * FROM ORDERS WHERE QUANTITY >= 3;

//FETCH 사용하여 가장 비싼 메뉴 조회
SELECT * FROM MENU ORDER BY PRICE DESC
FETCH FIRST 1 ROWS ONLY;

//가장 주문량이 많은 메뉴 조회
SELECT * FROM ORDERS ORDER BY QUANTITY DESC
FETCH FIRST 1 ROWS ONLY;

//WINDOW로 합계
SELECT ORDER_ID, ORDER_DATE, TOTAL_PRICE,
    SUM(TOTAL_PRICE) OVER (ORDER BY ORDER_DATE) AS OD
FROM ORDERS;

//WINDOW로 순위
SELECT ORDER_ID, ORDER_DATE, TOTAL_PRICE,
    RANK() OVER (ORDER BY TOTAL_PRICE) AS AD
FROM ORDERS;
