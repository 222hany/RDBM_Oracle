=======================================테이블 생성==========================================
CREATE TABLE BANK(
ACCOUNT_ID INT PRIMARY KEY,                  --기본키. 각 계좌 ID를 고유하게 식별.
ACCOUNT_NUMBER VARCHAR2(15) UNIQUE NOT NULL, --고유제약, NOT NULL제약. 중복 계좌번호, 빈 값 허용 X.
ACCOUNT_NAME VARCHAR(50) NOT NULL,           --계좌 소유주 이름. NULL값 허락 X.
BALANCE DECIMAL(10,2) NOT NULL,              --금액.(잔액) 소수점 이하 2자리 까지 표현.
BRANCH_NAME VARCHAR2(50),                    --은행 계좌 정보를 저장.
LAST_TRANSACTION_DATE DATE,                  --마지막 거래 날짜.
CONSTRAINT CHK_BALANCE CHECK (BALANCE >= 0)  --체크제약. 잔액은 0보다 작거나 같을 수 없음.(-값이 나오지 않도록 설정)
);

=======================================행 삽입==========================================
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (1, '1234567890', '가나다', 1000.00, 'kh', TO_DATE('2023-10-16', 'YYYY-MM-DD'));
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (2, '1236777888', '이동연', 400.50, '북쪽지점', TO_DATE('2023-10-07', 'YYYY-MM-DD'));
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (3, '1111222233', '김영희', 500.75, '서쪽지점', TO_DATE('2023-10-14', 'YYYY-MM-DD'));
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (4, '4444555566', '박철수', 2000.00, '동쪽지점', TO_DATE('2023-10-13', 'YYYY-MM-DD'));
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (5, '7777888899', '이지은', 750.25, '남쪽지점', TO_DATE('2023-10-12', 'YYYY-MM-DD'));
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (6, '2222333344', '배민정', 3000.50, '북쪽지점', TO_DATE('2023-10-11', 'YYYY-MM-DD'));
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (7, '5555666777', '송은희', 1500.75, '서쪽지점', TO_DATE('2023-10-10', 'YYYY-MM-DD'));
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (8, '8888999000', '정민호', 4000.00, '동쪽지점', TO_DATE('2023-10-09', 'YYYY-MM-DD'));
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (9, '3333444555', '김서영', 950.25, '남쪽지점', TO_DATE('2023-10-08', 'YYYY-MM-DD'));
INSERT INTO BANK (account_id, account_number, account_name, balance, branch_name, last_transaction_date)
VALUES (10, '6666777888', '이동훈', 3200.50, '북쪽지점', TO_DATE('2023-10-07', 'YYYY-MM-DD'));

=======================================쿼리 연습문제==========================================
//1. 잔액이 1000 이상인 계좌의 계좌번호와 잔액 조회
SELECT ACCOUNT_NUMBER, BALANCE FROM BANK WHERE BALANCE >= 1000;

//2. 도시가 "서쪽지점" 인 계좌의 계좌 소유주 이름 조회
SELECT ACCOUNT_NAME FROM BANK WHERE BRANCH_NAME = '서쪽지점';

//3. 마지막 거래 날짜가 '2023-10-10' 이전인 계좌의 계좌번호와 마지막 거래 날짜를 조회
SELECT ACCOUNT_NUMBER, LAST_TRANSACTION_DATE FROM BANK WHERE LAST_TRANSACTION_DATE > TO_DATE('2023-10-10','YYYY-MM-DD');

//4. 잔액이 가장 큰 계좌의 계좌 번호와 잔액을 조회
SELECT ACCOUNT_NUMBER, BALANCE FROM BANK WHERE BALANCE = (SELECT MAX(BALANCE)FROM BANK);

//5. 잔액이 500보다 크고 1000보다 작은 계좌의 계좌 소유주 이름 조회
SELECT ACCOUNT_NAME FROM BANK WHERE BALANCE BETWEEN 500 AND 1000;

//6. 계좌번호가 1234567890 계좌의 잔액을 1500으로 업데이트 하기
UPDATE BANK SET BALANCE = 1500 WHERE ACCOUNT_NUMBER = '1234567890';

//7. 잔액이 2000 인상인 계좌의 잔액을 10% 증가
UPDATE BANK SET BALANCE = BALANCE + BALANCE*0.1 WHERE BALANCE >= 2000;

//8. 잔액이 0보다 작은 계좌가 있는지 확인
SELECT * FROM BANK WHERE BALANCE < 0;

//9. 마지막 거래 날짜가 가장 빠른 계좌의 소유주 조회(FETCH)
SELECT * FROM BANK ORDER BY LAST_TRANSACTION_DATE FETCH FIRST 1 ROW ONLY;

//10. 모든 계좌의 평균 잔액 계산
SELECT AVG(BALANCE) 평균잔액 FROM BANK;

//11. 도시가 "남쪽지점" 인 계좌의 평균 잔액 계산
SELECT AVG(BALANCE) 남쪽지점평균잔액 FROM BANK WHERE BRANCH_NAME = '남쪽지점';
